// SPDX-License-Identifier: MIT

pragma solidity 0.8.14;

contract SmartWallet {
    address public owner;
    mapping(address=>bool) guardians; 
    mapping(address=>mapping(address=>bool)) confirmations; 
    mapping(address=>uint) allownces;
    mapping(address => bool) public isAllowedToSend;
    uint public constant confirmationsFromGuardiansForReset = 3;
    mapping(address=>uint) confirmedCount;
    receive() external payable {

    }
    constructor() {
       owner=msg.sender;
    }
    
    function setNextOwner(address newAdresss)public  {
       require(guardians[msg.sender], "You cant set new owner");
       require(confirmations[newAdresss][msg.sender]==false, "You have already voted");
       confirmations[newAdresss][msg.sender]=true;
       confirmedCount[newAdresss]++;
       if (confirmedCount[newAdresss]==confirmationsFromGuardiansForReset) {
        owner==newAdresss;
        confirmedCount[newAdresss]=0;
       }
    }

    function addGuardian(address tobeGuardian)public  {
       require(msg.sender==owner,"You cant add any guardian");
       guardians[tobeGuardian]=true;
    }

    function setAllownces(address luckyaddress,uint amount)public  {
        allownces[luckyaddress]=amount;
        isAllowedToSend[luckyaddress]=true;
    }

    function sendMoney(address payable _to,uint amount, bytes memory payload)public returns(bytes memory) {
        if (msg.sender!=owner) {
            require(allownces[msg.sender]>=amount,"Not have enough funds");
           
            require(isAllowedToSend[msg.sender], "You are not allowed to send any transactions, aborting");
            allownces[msg.sender]-=amount;
        }
        (bool success, bytes memory returnData)=_to.call{value:amount}(payload);
        require(success,"Transfering Funds Failed");
        return returnData;
    }

}

contract Consumer {
    function deposit()public  payable  {
        
    }
    function getbalance()public view returns (uint) {
        return address(this).balance;
    }
}